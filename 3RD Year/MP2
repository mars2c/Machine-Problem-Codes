from queue import Queue  

def readfile(filename):
    process_data = []
    with open(filename, "r") as file:
        for line in file:
            process_info = line.split()
            process_id = int(process_info[0])
            arrival_time = int(process_info[1])
            burst_time = int(process_info[2])
            priority = int(process_info[3])
            process_data.append((process_id, arrival_time, burst_time, priority))
    return process_data        

def FCFS(process_data):
    print("FCFS:")
    turnaround_time = []
    temp = []
    waitingtime = []
    wttemp = []
    total_time = 0
    total = 0
    current_time = 0
    for i in range(len(process_data)):
        process_id, arrival_time, burst_time, priority = process_data[i]
        if current_time <= arrival_time:
            current_time = arrival_time
        temp = current_time + burst_time
        turnaround_time.append(temp)
        current_time = temp
    total = sum(turnaround_time)
    
    print("--TURNAROUND TIME--")
    for a in range(len(turnaround_time)):
        print("PROCESS: ", a+1, "[",turnaround_time[a], "ms]")
    print("\nTOTAL TURNAROUND TIME: ", total, "ms")
    average_turnaround_time = total/len(process_data)
    print("AVE. Turnaround Time: ", average_turnaround_time, "ms")
    print()

    for j in range(len(process_data)):
        process_id, arrival_time, burst_time, priority = process_data[j]
        turnaround_temp = turnaround_time[j]
        wttemp =  turnaround_temp - burst_time
        waitingtime.append(wttemp)
        total_time = total_time + wttemp
    print("--WAITING TIME--")
    for a in range(len(waitingtime)):
        print("PROCESS: ", a+1, "[",turnaround_time[a], "ms]")
    print("\nTOTAL WAITING TIME: ", total_time, "ms")
    average_waiting_time = total_time/len(process_data)
    print("AVE. Waiting Time: ", average_waiting_time, "ms")

    print()
    for b in range(len(waitingtime)):
        print("----", waitingtime[b])
        print("P",b+1)
    print("----",max(turnaround_time))

    return waitingtime, average_waiting_time, total, average_turnaround_time

def SJF(process_data):
    print("SJF:")
    ttime = 0
    burst = []
    turnaround_time = []
    waitingtime = []
    temp = []
    pid = []
    wt = 0
    current_time = 0
    total_time = 0
    total = 0
    testing = sorted(process_data, key=lambda p:p[2])

    for i in range(len(testing)):
        process_id, arrival_time, burst_time, priority = testing[i]
        pid.append(process_id)
        burst.append(burst_time)
    for i in range(len(burst)):
        wt = current_time
        current_time += burst[i]
        ttime = current_time
        turnaround_time.append(ttime)  
    total = sum(turnaround_time)
    print("--TURNAROUND TIME--")
    for a in range(len(turnaround_time)):
        print("PROCESS: ", pid[a], "[",turnaround_time[a], "ms]")
    print("\nTOTAL TURNAROUND TIME: ", total, "ms")
    average_turnaround_time = total/len(process_data)
    print("AVE. Turnaround Time: ", average_turnaround_time, "ms")
    print()

    for j in range(len(testing)):
        process_id, arrival_time, burst_time, priority = testing[j]       
        turnaround_temp = turnaround_time[j]
        temp = turnaround_temp - burst_time
        waitingtime.append(temp)
        total_time += temp
    print("--WAITING TIME--")
    for b in range(len(waitingtime)):
        print("PROCESS: ", pid[b], "[",waitingtime[b], "ms]")
    print("\nTOTAL WAITING TIME: ", total_time, "ms")
    average_waiting_time = total_time/len(process_data)
    print("AVE. Waiting Time: ", average_waiting_time, "ms")

    print()
    for b in range(len(waitingtime)):
        print("----", waitingtime[b])
        print("P",pid[b])
    print("----",max(turnaround_time))

    return turnaround_time,waitingtime, average_waiting_time

def SRPT(process_data):
    print("SRPT:")
    remaining_processes = process_data.copy()
    current_time = 0
    total = 0
    total_wt = 0
    completion_times = {}
    waiting_times = {}
    turnaround_times = {}
    strGant = ""
    prevPro = None
    while remaining_processes:
        shortest_burst_time = float('inf')
        shortest_process = None
        for i in range(len(remaining_processes)):
            process_id, arrival_time, burst_time, priority = remaining_processes[i]
            if burst_time < shortest_burst_time and arrival_time <= current_time:

                shortest_burst_time = burst_time
                shortest_process = i
        if shortest_process is not None:
            process_id, arrival_time, burst_time, priority = remaining_processes[shortest_process]
            if burst_time == 1:
                completion_times[process_id] = current_time + 1
                waiting_times[process_id] = current_time + 1 - arrival_time - burst_time
                remaining_processes.pop(shortest_process)
            else:
                remaining_processes[shortest_process] = (process_id, arrival_time, burst_time - 1, priority)
        current_time += 1
        if (prevPro != process_id):
            prevPro = process_id
            strGant += (f"\n----{current_time}")
            strGant += "\n"
            strGant += (f"P {process_id}")

    for process_id, completion_time in completion_times.items():
        arrival_time, burst_time, priority = next(filter(lambda x: x[0] == process_id, process_data))[1:]
        waiting_times[process_id] = completion_time - arrival_time - burst_time
        turnaround_times[process_id] = completion_time - arrival_time
        
        
    print("--TURNAROUND TIME--")
    for process_id in sorted(completion_times):
        print("PROCESS: ", process_id, "[",completion_times[process_id], "ms]")
        total += completion_times[process_id]
    print("\nTOTAL TURNAROUND TIME: ", total, "ms")
    average_turnaround_time = total/len(process_data)
    print("AVE. Turnaround Time: ", average_turnaround_time, "ms")
    print()
    print("--WAITING TIME--")
    for process_id in sorted(completion_times):
        print("PROCESS: ", process_id, "[",waiting_times[process_id], "ms]")
        total_wt += waiting_times[process_id]
    print("\nTOTAL WAITING TIME: ", total_wt, "ms")
    average_waiting_time = total_wt/len(process_data)
    print("AVE. Waiting Time: ", average_waiting_time, "ms")
    print()

    print(strGant)
    print("----" + str(current_time))

    return [(process_id, completion_times[process_id], waiting_times[process_id]) for process_id in sorted(completion_times)]

def Priority(process_data):
    print("PRIORITY:")
    turnaround_time = []
    temp = []
    waitingtime = []
    wttemp = []
    total_time = 0
    current_priority = 0
    pid = []
    total = 0
    priori = sorted(process_data, key=lambda prio:prio[3])
    for i in range(len(priori)):
        process_id, arrival_time, burst_time, priority = priori[i]
        if current_priority <= arrival_time:
            current_priority = arrival_time
        temp = current_priority + burst_time
        turnaround_time.append(temp)
        current_priority = temp
        pid.append(process_id)
    total = sum(turnaround_time)
    print("--TURNAROUND TIME--")
    for a in range(len(turnaround_time)):
        print("PROCESS: ", pid[a], "[",turnaround_time[a], "ms]")
    print("\nTOTAL TURNAROUND TIME: ", total, "ms")
    average_turnaround_time = total/len(process_data)
    print("AVE. Turnaround Time: ", average_turnaround_time, "ms")
    print()
    
    for j in range(len(priori)):
        process_id, arrival_time, burst_time, priority = priori[j]       
        turnaround_temp = turnaround_time[j]
        wttemp = turnaround_temp - burst_time
        waitingtime.append(wttemp)
        total_time += wttemp
    print("--WAITING TIME--")
    for a in range(len(waitingtime)):
        print("PROCESS: ", pid[a], "[",waitingtime[a], "ms]")
    print("\nTOTAL WAITING TIME: ", total_time, "ms")
    average_waiting_time = total_time/len(process_data)
    print("AVE. Waiting Time: ", average_waiting_time, "ms")

    print()
    for b in range(len(waitingtime)):
        print("----", waitingtime[b])
        print("P",pid[b])
    print("----",max(turnaround_time))
    return turnaround_time, waitingtime, average_waiting_time

def RoundRobin(process_data): 
    print("ROUND ROBIN:")
    turnaround_time = []
    roundrobin_process = []
    roundrobin_process_current = []
    roundrobin_process_pid = []
    temp = []
    rrwaitingtime = []
    rrwaitingtime_temp= []
    rrwaitingtime_temp2= []
    pid = []
    pid1 = []
    current_time = 0
    totalturnaround = 0
    remaining_processes = Queue()
    for i in range(len(process_data)):
        process_id, arrival_time, burst_time, priority = process_data[i]
        pid1.append(process_id)
        remaining_processes.put((process_id, arrival_time, burst_time))
    while not remaining_processes.empty():
        process_id, arrival_time, burst_time = remaining_processes.get()
        if current_time < arrival_time:
            current_time = arrival_time
        rrwaitingtime_temp.append(process_id)
        rrwaitingtime_temp2.append(current_time)
        rrwaitingtime.append((process_id,current_time))
        if burst_time > 4:
            remaining_time = burst_time - 4
            remaining_processes.put((process_id, current_time + 4, remaining_time))
            current_time += 4
            roundrobin_process.append((process_id, current_time))
            roundrobin_process_pid.append(process_id)
            roundrobin_process_current.append(current_time)
        else:
            temp = current_time + burst_time
            turnaround_time.append(temp)
            pid.append(process_id)
            current_time = temp
            roundrobin_process.append((process_id, current_time))
            roundrobin_process_pid.append(process_id)
            roundrobin_process_current.append(current_time)
    total = sum(turnaround_time)
    print("--TURNAROUND TIME--")
    for a in range(len(turnaround_time)):
        print("PROCESS: ", pid[a], "[",turnaround_time[a],"ms]")
    print("\nTOTAL TURNAROUND TIME: ", total, "ms")
    average_turnaround_time = total/len(process_data)
    print("AVE. Turnaround Time: ", average_turnaround_time, "ms")
    print()

    print("--WAITING TIME--")
    for a in range(len(rrwaitingtime)):
        process_id, current_time = rrwaitingtime[a]  
    pidcount = []
    count = 1
    length = len(pid)
    total_count = 0
    total = 0
    while length > 0:
        pidcount = list(filter(lambda x: x[0] == count, rrwaitingtime))
        count+=1
        length-=1
        pid_occurrences = {}
        for pid in pidcount:
            pid_num = pid[0]
            if pid_num not in pid_occurrences:
                pid_occurrences[pid_num] = 1
            else:
                pid_occurrences[pid_num] += 1
            num_occurrences = pid_occurrences[pid_num]
            if num_occurrences > 1:
                num_occurrences -= 1
                waiting_time = pid[-1] - (num_occurrences * 4)
            else:
                waiting_time = pid[-1]
        total = total + waiting_time
        total_count+=1
        print("PROCESS: ", pid_num, "[", waiting_time, "ms]")
    print("\nTOTAL WAITING TIME: ", total, "ms")
    average_computing_time = total/total_count
    print("AVE. Waiting Time: ", average_computing_time, "ms")

    print()
    for b in range(len(roundrobin_process)):
        print("----", rrwaitingtime_temp2[b])
        print(" P",rrwaitingtime_temp[b])
    print("----",max(turnaround_time))
             
       

file = readfile('process_3.txt')

FCFS_process = FCFS(file)
print()
SJF_process = SJF(file)
print()
SRPT_process = SRPT(file)

print()
Priority_process = Priority(file)
print()
RoundRobin(file)
