from random import randint
from abc import ABC, abstractmethod

class Monster(ABC):
    @abstractmethod
    def announce(self):
        pass
    @abstractmethod
    def move(self):
        pass

class Moblin(Monster):
    @abstractmethod
    def stab(self):
        pass
    @abstractmethod
    def kick(self):
        pass

class Bokoblin(Monster):
    @abstractmethod
    def bludgeon(self):
        pass
    @abstractmethod
    def defend(self):
        pass

class Lizalflos(Monster):
    @abstractmethod
    def throwBoomerang(self):
        pass
    @abstractmethod
    def hide(self):
        pass

class Dungeon(ABC):
    @abstractmethod
    def newBokoblin(self) -> Bokoblin:
        pass
    @abstractmethod
    def newMoblin(self) -> Moblin:
        pass
    @abstractmethod
    def newLizalflos(self) -> Lizalflos:
        pass


#Easy Dungeon Difficulty
class NormalBokoblin(Bokoblin):
    def bludgeon(self):
        print("Bokoblin bludgeons you with a boko club for 1 damage")
    def defend(self):
        print("Bokoblin defends itself with a boko shield")
    def announce(self):
        print("A bokoblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.bludgeon()
        else:
            self.defend()

class NormalMoblin(Moblin):
    def stab(self):
        print("Moblin stabs you with a spear for 3 damage")
    def kick(self):
        print("Moblin kicks you for 1 damage")
    def announce(self):
        print("A moblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.stab()
        else:
            self.kick()

class NormalLizalflos(Lizalflos):
    def throwBoomerang(self):
        print("Lizalflos throws its lizal boomerang at you for 2 damage")
    def hide(self):
        print("Lizalflos camouflages itself")
    def announce(self):
        print("A lizalflos appeared")
    def move(self):
        if randint(1,3) > 1:
            self.throwBoomerang()
        else:
            self.hide()

class EasyDungeon(Dungeon):
    def newBokoblin() -> Bokoblin:
        return NormalBokoblin()
    def newMoblin() -> Moblin:
        return NormalMoblin()
    def newLizalflos() -> Lizalflos:
        return NormalLizalflos()


#Medium Dungeon Difficulty
class BlueLizalflos(Lizalflos):
    def throwBoomerang(self):
        print("Blue Lizalflos throws its forked boomerang at you for 3 damage")
    def hide(self):
        print("Blue Lizalflos camouflages itself")
    def announce(self):
        print("A blue lizalflos appeared")
    def move(self):
        if randint(1,3) > 1:
            self.throwBoomerang()
        else:
            self.hide

class BlueMoblin(Moblin):
    def stab(self):
        print("Blue Moblin stabs you with a rusty halberd for 5 damage")
    def kick(self):
        print("Blue Moblin kicks you for 2 damage")
    def announce(self):
        print("A blue moblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.stab()
        else:
            self.kick() 

class BlueBokoblin(Bokoblin):
    def bludgeon(self):
        print("Blue Bokoblin bludgeons you with a spiked boko club for 2 damage")
    def defend(self):
        print("Blue Bokoblin defends itself with a spiked boko shield")
    def announce(self):
        print("A blue bokoblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.bludgeon()
        else:
            self.defend()
    
class MediumDungeon(Dungeon):
    def newBokoblin() -> Bokoblin:
        return BlueBokoblin()
    def newMoblin() -> Moblin:
        return BlueMoblin()
    def newLizalflos() -> Lizalflos:
        return BlueLizalflos()


#Hard Dungeon Difficulty
class SilverLizalflos(Lizalflos):
    def throwBoomerang(self):
        print("Silver Lizalflos throws its tri-boomerang at you for 7 damage")
    def hide(self):
        print("Silver Lizalflos camouflages itself")
    def announce(self):
        print("A silver lizalflos appeared")
    def move(self):
        if randint(1,3) > 1:
            self.throwBoomerang()
        else:
            self.hide()    

class SilverMoblin(Moblin):
    def stab(self):
        print("Silver Moblin stabs you with a knight's halberd for 10 damage")
    def kick(self):
        print("Silver Moblin kicks you for 3 damage")
    def announce(self):
        print("A silver moblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.stab()
        else:
            self.kick()

class SilverBokoblin(Bokoblin):
    def bludgeon(self):
        print("Silver Bokoblin bludgeons you with a dragonbone boko club for 5 damage")
    def defend(self):
        print("Silver Bokoblin defends itself with a dragonbone boko shield")
    def announce(self):
        print("A silver bokoblin appeared")
    def move(self):
        if randint(1,3) > 1:
            self.bludgeon()
        else:
            self.defend()

class HardDungeon(Dungeon):
    def newBokoblin() -> Bokoblin:
        return SilverBokoblin()
    def newMoblin() -> Moblin:
        return SilverMoblin()
    def newLizalflos() -> Lizalflos:
        return SilverLizalflos()

class Encounter:
    def __init__(self):
        self.__enemies = []
        self.__dungeon = Dungeon
        for diff in range(1):
            d = randint(1,3)
            if d == 1:
                self.__dungeon = EasyDungeon
                for i in range(randint(0,8)):
                    r = randint(1,3)
                    if r == 1:
                        self.__enemies.append(self.__dungeon.newBokoblin())
                    elif r == 2:
                        self.__enemies.append(self.__dungeon.newMoblin())
                    else:
                        self.__enemies.append(self.__dungeon.newLizalflos())
            elif d == 2:
                self.__dungeon = MediumDungeon
                for i in range(randint(0,8)):
                    r = randint(1,3)
                    if r == 1:
                        self.__enemies.append(self.__dungeon.newBokoblin())
                    elif r == 2:
                        self.__enemies.append(self.__dungeon.newMoblin())
                    else:
                        self.__enemies.append(self.__dungeon.newLizalflos())
            else:
                self.__dungeon = HardDungeon
                for i in range(randint(0,8)):
                    r = randint(1,3)
                    if r == 1:
                        self.__enemies.append(self.__dungeon.newBokoblin())
                    elif r == 2:
                        self.__enemies.append(self.__dungeon.newMoblin())
                    else:
                        self.__enemies.append(self.__dungeon.newLizalflos())
            
            print("Difficulty: " + str(d))
            if d == 1: print("Easy Dungeon")
            elif d == 2: print("Medium Dungeon")
            else: print("Hard Dungeon")
            print()

    def announceEnemies(self):
        print("%d monsters appeared" % len(self.__enemies))
        for enemy in self.__enemies:
            enemy.announce()

    def moveEnemies(self):
        for enemy in self.__enemies:
            enemy.move()



encounter = Encounter()
encounter.announceEnemies()
print()
encounter.moveEnemies()

